{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Rust CP template": {
    "prefix": "rust_cp",
    "scope": "rust",
    "body": [
      "/*",
      "    Author: Arjan Singh Bal",
      "    \"Everything in this world is magic, except to the magician\"",
      "*/",
      "",
      "#[allow(unused_imports)]",
      "use std::str::FromStr;",
      "use std::io::{BufWriter, stdin, stdout, Write, Stdout};",
      "",
      "#[derive(Default)]",
      "struct Scanner {",
      "    buffer: Vec<String>",
      "}",
      "",
      "impl Scanner {",
      "    fn next<T: std::str::FromStr>(&mut self) -> T {",
      "        loop {",
      "            if let Some(token) = self.buffer.pop() {",
      "                return token.parse().ok().expect(\"Failed parse\");",
      "            }",
      "            let mut input = String::new();",
      "            stdin().read_line(&mut input).expect(\"Failed read\");",
      "            self.buffer = input.split_whitespace().rev().map(String::from).collect();",
      "        }",
      "    }",
      "}",
      "",
      "fn main() {",
      "    let mut scan = Scanner::default();",
      "    let mut out = &mut BufWriter::new(stdout());",
      "    let t = scan.next();",
      "    for _ in 0..t {",
      "        solve(&mut scan, &mut out);",
      "    }",
      "}",
      "",
      "fn solve(scan: &mut Scanner, out: &mut BufWriter<Stdout>) {",
      "    $1",
      "}",
      ""
    ],
    "description": "Rust CP template"
  }
}
